name: OpenAPI Auto-Fetch & Code Generation

permissions:
  contents: write
  pull-requests: write

on:
  schedule:
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      force_regenerate:
        description: 'Force code regeneration even if no changes'
        required: false
        type: boolean

jobs:
  regenerate-code:
    runs-on: ubuntu-latest
    env:
      PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'

      - name: Install generator deps
        run: npm ci --prefix generator

      - name: Fetch latest OpenAPI spec
        run: |
          curl -s https://raw.githubusercontent.com/near/nearcore/master/chain/jsonrpc/openapi/openapi.json -o generator/openapi_temp.json

      - name: Check for changes
        id: check-changes
        run: |
          if [ ! -f "generator/openapi.json" ] || ! cmp -s "generator/openapi_temp.json" "generator/openapi.json"; then
            echo "openapi_changed=true" >> $GITHUB_OUTPUT
            mv generator/openapi_temp.json generator/openapi.json
          else
            echo "openapi_changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate code
        if: steps.check-changes.outputs.openapi_changed == 'true' || github.event.inputs.force_regenerate == 'true'
        run: |
          npm run generate --prefix generator
          chmod +x ./gradlew || true
          ./gradlew :packages:client:compileKotlinJvm --no-daemon --stacktrace
          ./gradlew :packages:client:jvmTest --no-daemon --stacktrace --continue

      - name: "Debug: show git URL rewrite (masked)"
        run: |
          git config --global --get-regexp '^url\..*github.com' 2>/dev/null || true
          git config --global --get-regexp '^url\..*github.com' 2>/dev/null | sed -E 's#https://[^@]*@#https://[redacted]@#' || echo "(no rewrite configured)"

      - name: Prepare branch and push generated changes
        if: steps.check-changes.outputs.openapi_changed == 'true' || github.event.inputs.force_regenerate == 'true'
        env:
          PAT: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          set -euo pipefail
          BRANCH=automated/openapi-update
          git fetch origin
          git checkout -B "$BRANCH"

          # Ensure workflow files are not staged/committed (safety)
          git restore --staged .github/workflows/ || true
          git checkout -- .github/workflows/ || true

          # Stage only generated files
          git add packages/types || true
          git add packages/client || true
          git add generator || true

          git status --porcelain
          git diff --name-only --staged || true

          if git diff --staged --quiet; then
            echo "No generated changes to commit"
            exit 0
          fi

          printf "%s\n" "ðŸ¤– Auto-generated: Update NEAR JSON-RPC client from latest OpenAPI spec" > /tmp/commitmsg
          printf "\n- Updated OpenAPI specification from nearcore\n- Regenerated Kotlin types and client code\n- All tests passing\n" >> /tmp/commitmsg

          git -c user.name="${GITHUB_ACTOR}" -c user.email="${GITHUB_ACTOR}@users.noreply.github.com" commit -F /tmp/commitmsg || true

          if [ -n "$PAT" ]; then
            git config --global url."https://$PAT@github.com/".insteadOf "https://github.com/"
          fi

          echo "--- staged files ---"
          git status --porcelain || true
          git diff --staged --name-only || true
          echo "--- staged diff stat ---"
          git --no-pager diff --staged --stat || true

          git push --force-with-lease origin "$BRANCH":refs/heads/"$BRANCH"

      - name: Create or update PR
        if: steps.check-changes.outputs.openapi_changed == 'true' || github.event.inputs.force_regenerate == 'true'
        uses: actions/github-script@v6
        with:
          script: |
            const owner = context.repo.owner
            const repo = context.repo.repo
            const head = 'automated/openapi-update'
            const base = context.repo.default_branch || 'master'
            const prs = await github.rest.pulls.list({ owner, repo, head: `${owner}:${head}`, state: 'open' })
            if (prs.data.length > 0) {
              core.info(`PR already exists: ${prs.data[0].html_url}`)
            } else {
              const pr = await github.rest.pulls.create({ owner, repo, head, base, title: 'ðŸ¤– Auto-generated: Update NEAR JSON-RPC client from latest OpenAPI spec', body: 'Automated OpenAPI regeneration (generated files only).' })
              core.info(`Created PR: ${pr.data.html_url}`)
            }